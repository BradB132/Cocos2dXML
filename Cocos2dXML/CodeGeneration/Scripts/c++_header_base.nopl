
console("generating c++ base headers");

Object classes = abstractions.classes;

String schemaNickname = schema.targetNamespace;
schemaNickname = substring(schemaNickname, lastIndexOf(schemaNickname, "/")+1);

for(int i = 0; i < classes.count; i++)
{
	Object class = classes[i];
	String name = class.className;
	String parentName = class.parentClassName;
	Boolean hasParentClass = (parentName != "");
	
	//output a base class with generated code
	String baseName = name+"_Base";
	outputToFile(valueForKey('__ROOT_DIR__')+"/"+baseName+".h");

//put a comment at the top with some metadata about this file
<?//
//  ?>#baseName;<?.h
//  ?>#schemaNickname;<?
//
//  Created by NoPLGenerator on ?>#format("%/%/%", (Number)month(), (Number)dayOfTheMonth(), (String)substring((String)year(), 2));<?.
//  Copyright (c) ?>#year();<?. All rights reserved.
//

?>
//wrap this class definition with a precompiler macro
<?#ifndef __?>#toUpper(baseName);<?_H__
#define __?>#toUpper(baseName);<?_H__

?>

Object attributes = class.attributes;
Object children = class.children;

//define ID's for attribute refreshing
if(attributes.count > 0)
{
	for(int j = 0; j < attributes.count; j++)
	{
		String attrName = attributes[j].name;
<?#define id_?>#name;<?_?>#attrName;<? ?>#fastHash(attrName)%999999;<?
?>
	}
<?
?>
}

if(children.count > 0)
{
	for(int j = 0; j < children.count; j++)
	{
<?class ?>#valueForKey((String)children[j].type);<?;
?>
	}
<?
?>
}

<?#include <iostream>
#include <libxml/parser.h>
#include "cocos2d.h"
#include "?>#schemaNickname;<?_enums.h"
#include "?>#schemaNickname;<?_typedefs.h"
?>
if(hasParentClass)
{
<?#include "?>#parentName;<?.h"
?>
}
<?
class ?>#baseName;

if(hasParentClass)
{
	//declare this class as the subclass of the parent class
	<? : public ?>#parentName;
}
else
{
	//we need to make sure that all of these objects inherit from the base object
	<? : public cocos2d::CCObject?>
}
<?
{
public:

	?>#baseName;<?();
	~?>#baseName;<?();
?>

//generate accessor functions if we have attributes
if(attributes.count > 0)
{
<?
?>
	for(int j = 0; j < attributes.count; j++)
	{
		Object attr = attributes[j];
		String capName = capitalize((String)attr.name);
		String typeName = valueForKey((String)attr.type);
<?	virtual ?>#typeName;<? get?>#capName;<?();
	virtual bool set?>#capName;<?(?>#typeName;<? new?>#capName;<?);

?>
	}
}

if(children.count > 0)
{
	for(int j = 0; j < children.count; j++)
	{
		Object child = children[j];
		String listName = capitalize((String)pluralize((String)child.name));
<?	virtual std::vector<?>#valueForKey((String)child.type);<?*>* get?>#listName;<?();
?>
	}
<?

?>
}

<?	virtual void initWithXML(xmlNodePtr node, CCObject* parentObj);
	virtual void attributeDidChange(int attributeID);
	virtual void refreshAllAttributes();

?>
if(!hasParentClass)
{
<?	virtual CCObject* getParent();
	virtual void load();
	virtual void unload();

?>
}

if(!hasParentClass || children.count > 0)
{
<?	virtual void visitLoad();
	virtual void visitUnload();

?>
}

//declare any attributes we have
if(attributes.count > 0)
{
<?protected:

?>
	if(!hasParentClass)
	{
<?	cocos2d::CCObject* parent;
?>
	}
	for(int j = 0; j < attributes.count; j++)
	{
		Object attr = attributes[j];
<?	?>#valueForKey((String)attr.type);<? ?>#attr.name;<?;
?>
	}
}

if(children.count > 0)
{
	for(int j = 0; j < children.count; j++)
	{
		Object child = children[j];
		String listName = pluralize((String)child.name);
<?	std::vector<?>#valueForKey((String)child.type);<?*> ?>#listName;<?;
?>
	}
}

<?
};

#endif //end __?>#toUpper(baseName);<?_H__
?>
	
}