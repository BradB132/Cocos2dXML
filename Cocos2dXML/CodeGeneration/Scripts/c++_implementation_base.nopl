
console("generating c++ base implementations");

Object classes = abstractions.classes;

String schemaNickname = schema.targetNamespace;
schemaNickname = substring(schemaNickname, lastIndexOf(schemaNickname, "/")+1);

for(int i = 0; i < classes.count; i++)
{
	Object class = classes[i];
	String name = class.className;
	String parentName = class.parentClassName;
	Boolean hasParentClass = (parentName != "");

	//output a base class with generated code
	String baseName = name+"_Base";
	outputToFile(valueForKey('__ROOT_DIR__')+"/"+baseName+".cpp");

	Object attributes = class.attributes;
	Object children = class.children;

//put a comment at the top with some metadata about this file
<?//
//  ?>#baseName;<?.cpp
//  ?>#schemaNickname;<?
//
//  Created by NoPLGenerator on ?>#format("%/%/%", (Number)month(), (Number)dayOfTheMonth(), (String)substring((String)year(), 2));<?.
//  Copyright (c) ?>#year();<?. All rights reserved.
//

#include "?>#baseName;<?.h"
?>
for(int j = 0; j < children.count; j++)
{
<?#include "?>#children[j].name;<?.h"
?>
}
<?
?>

bool hasDefaults = NO;
if(!hasDefaults)
{
	for(int j = 0; j < attributes.length; j++)
	{
		//default is a NoPL keyword, so we need to access it with a subscript
		if(attributes[j]['default'] != '0x0')
		{
			hasDefaults = YES;
			break;
		}
	}
}

//create the constructor / desctuctor
#baseName;<?::?>#baseName;<?()?>
BOOL first = YES;

if(!hasParentClass)
{
	first = NO;
<?:
parent(NULL)?>
}

if(hasDefaults)
{
	for(int j = 0; j < attributes.length; j++)
	{
		Object attr = attributes[j];

		//default is a NoPL keyword, so we need to access it with a subscript
		if(attr['default'] != '0x0')
		{
			if(first)
			{
				<?:
?>
			}
			else
			{
				<?,
?>
			}
			first = NO;
			String defaultStr = attr['default'];
			String typeName = valueForKey((String)attr.type);
			switch(typeName)
			{
				case 'std::string':
					//this is a string, enclose it in quotes
					defaultStr = format('"%"', defaultStr);
					break;
				case 'cocos2d::ccColor3B':
					defaultStr = format('string_to_ccColor3B("%")', defaultStr);
					break;
				case 'Cocos2dXMLColor':
					defaultStr = format('string_to_%("%")', typeName, defaultStr);
					break;
				default:
					//determine if this is an enum
					BOOL isEnum = NO;
					Object enums = abstractions.enums;
					for(int k = 0; k < enums.length; k++)
					{
						if(enums[k].enumName == typeName)
						{
							isEnum = YES;
							break;
						}
					}
					if(isEnum)
					{
						defaultStr = typeName+"_"+defaultStr;
					}
					break;
			}
			#attr.name;<?(?>#defaultStr;<?)?>
		}
	}
}
for(int j = 0; j < children.length; j++)
{
	Object child = children[j];
	if(first)
	{
		<?:
?>
	}
	else
	{
		<?,
?>
	}
	first = NO;
	#pluralize((String)child.type);<?(new cocos2d::CCArray())?>
}
<?
{
}

?>#baseName;<?::~?>#baseName;<?()
{
?>
for(int j = 0; j < children.count; j++)
{
	Object child = children[j];
	String listName = pluralize((String)child.name);
<?	if(?>#listName;<?)
	{
		?>#listName;<?->release();
		?>#listName;<? = NULL;
	}
?>
}
<?}

void ?>#baseName;<?::attributeDidChange(int attributeID)
{
?>
	if(hasParentClass)
	{
<?	?>#parentName;<?::attributeDidChange(attributeID);
?>
	}
<?}

void ?>#baseName;<?::refreshAllAttributes()
{
?>
	if(hasParentClass)
	{
<?	?>#parentName;<?::refreshAllAttributes();
?>
	}
	for(int j = 0; j < attributes.count; j++)
	{
		String attrName = attributes[j].name;
<?	attributeDidChange(id_?>#name;<?_?>#attrName;<?);
?>
	}
<?}

void ?>#baseName;<?::initWithXML(xmlNodePtr node, ?>#valueForKey('__ROOT_CLASS__');<?* parentObj)
{
?>
if(hasParentClass)
{
<?	?>#parentName;<?::initWithXML(node, parentObj);

?>
}
else
{
<?	parent = parentObj;

?>
}

if(attributes.count > 0)
{
	for(int j = 0; j < attributes.count; j++)
	{
		Object attr = attributes[j];
		String attrName = attr.name;
<?	?>
		if(j ==0)
		{
			<?char* ?>
		}

	<?attrVal = (char*)xmlGetProp(node, (xmlChar*)"?>#attrName;<?");
	if(attrVal)
?>
		String typeName = valueForKey((String)attr.type);
		switch(typeName)
		{
			case 'int':
			case 'unsigned char':
<?		?>#attrName;<? = atoi(attrVal);
?>
				break;
			case 'unsigned int':
<?		?>#attrName;<? = strtoul(attrVal, NULL, 0);
?>
				break;
			case 'double':
			case 'float':
<?		?>#attrName;<? = atof(attrVal);
?>
				break;
			case 'cocos2d::CCPoint':
<?		?>#attrName;<? = string_to_CCPoint(attrVal);
?>
				break;
			case 'cocos2d::ccColor3B':
<?		?>#attrName;<? = string_to_ccColor3B(attrVal);
?>
				break;
			case 'Cocos2dXMLColor':
			case 'bool':
<?		?>#attrName;<? = string_to_?>#typeName;<?(attrVal);
?>
				break;
			default:
<?		?>
				//determine if this is an enum
				BOOL isEnum = NO;
				Object enums = abstractions.enums;
				for(int k = 0; k < enums.length; k++)
				{
					if(enums[k].enumName == typeName)
					{
						isEnum = YES;
						break;
					}
				}
				if(isEnum)
				{
					//this is an enum type
					#attrName;<? = string_to_?>#typeName;<?(attrVal);
?>
				}
				else
				{
					//this is a string?
					#attrName;<? = attrVal;
?>
				}

				break;
		}
	}
<?
?>
}

if(children.count > 0)
{
<?	xmlNodePtr child = node->children;
	while(child)
	{
		if(child->type == XML_ELEMENT_NODE)
		{
?>
	for(int j = 0; j < children.count; j++)
	{
		Object child = children[j];
		String childName = child.name;
<?			?>
		if(j != 0)
		{
			<?else ?>
		}

			<?if(isKindOfClass((char*)child->name, "?>#childName;<?"))
			{
				?>#childName;<?* newObj = (?>#childName;<?*)newObjectOfType((char*)child->name);
				?>#pluralize(childName);<?->addObject(newObj);
				newObj->release();
				newObj->initWithXML(child, this);
			}
?>
	}
<?		}
		child = child->next;
	}
?>
}

<?}

?>

if(!hasParentClass)
{
#valueForKey('__ROOT_CLASS__');<?* ?>#baseName;<?::getParent()
{
	return parent;
}

void ?>#baseName;<?::load()
{
	//override this in subclasses
}

void ?>#baseName;<?::unload()
{
	//override this in subclasses
}

?>

	if(children.count == 0)
	{
<?void ?>#baseName;<?::visitLoad()
{
	load();
}

void ?>#baseName;<?::visitUnload()
{
	unload();
}

?>
	}
}

if(attributes.count > 0)
{
	for(int j = 0; j < attributes.count; j++)
	{
		Object attr = attributes[j];
		String attrName = attr.name;
		String capName = capitalize(attrName);
		String typeName = valueForKey((String)attr.type);
#typeName;<? ?>#baseName;<?::get?>#capName;<?()
{
	return ?>#attrName;<?;
}

bool ?>#baseName;<?::set?>#capName;<?(?>#typeName;<? new?>#capName;<?)
{
	?>#attrName;<? = new?>#capName;<?;
	attributeDidChange(id_?>#name;<?_?>#attrName;<?);
	return true;
}

?>
	}
}

if(children.count > 0)
{
	for(int j = 0; j < children.count; j++)
	{
		Object child = children[j];
		String listName = pluralize((String)child.name);
		String capName = capitalize(listName);
<?cocos2d::CCArray* ?>#baseName;<?::get?>#listName;<?()
{
	return ?>#listName;<?;
}

?>
	}

<?void ?>#baseName;<?::visitLoad()
{
?>
if(hasParentClass)
{
<?	?>#parentName;<?::visitLoad();

?>
}
else
{
<?	load();

?>
}

if(children.count > 0)
{
<?	BaseObject* baseObj;
	cocos2d::ccArray* arrayData;
?>
	for(int j = 0; j < children.count; j++)
	{
		Object child = children[j];
		String listName = pluralize((String)child.name);
<?	arrayData = ?>#listName;<?->data; 
	for(int i = 0; i < arrayData->num; i++)
	{
		baseObj = (BaseObject*)arrayData->arr[i];
		baseObj->visitLoad();
	}
?>
	}
}
<?}

void ?>#baseName;<?::visitUnload()
{
?>
if(hasParentClass)
{
<?	?>#parentName;<?::visitUnload();

?>
}
else
{
<?	unload();

?>
}
if(children.count > 0)
{
<?	BaseObject* baseObj;
	cocos2d::ccArray* arrayData;
?>
	for(int j = 0; j < children.count; j++)
	{
		Object child = children[j];
		String listName = pluralize((String)child.name);
<?	arrayData = ?>#listName;<?->data; 
	for(int i = 0; i < arrayData->num; i++)
	{
		baseObj = (BaseObject*)arrayData->arr[i];
		baseObj->visitUnload();
	}
?>
	}
}
<?}

?>
}

if(!hasParentClass || attributes.count > 0 || children.count > 0)
{
<?NoPL_FunctionValue ?>#baseName;<?::evaluateFunction(const char* functionName, const NoPL_FunctionValue* argv, unsigned int argc)
{
?>

//check if we only are putting this function in because it's the root class
if(!hasParentClass && attributes.count == 0 && children.count == 0)
{
<?	NoPL_FunctionValue retVal;
	retVal.type = NoPL_DataType_Uninitialized;
	return retVal;
?>
}
else
{
<?	NoPL_FunctionValue retVal;
	retVal.type = NoPL_DataType_Uninitialized;
	
	//accessors
	if(argc == 0)
	{
?>
for(int j = 0; j < attributes.count; j++)
{
	Object attrib = attributes[j];
	String attribName = attrib.name;
	String typeName = attrib.type;
	String convertedTypeName = valueForKey(typeName);
<?		?>
	if(j != 0)
	{
		<?else ?>
	}
	
	//TODO: this generates a function with a whole lot of string comparisons, optimize this

	if(convertedTypeName == 'cocos2d::CCPoint')
	{
		<?if(!strcmp(functionName, "?>#attribName;<?X"))
		{
			retVal.numberValue = ?>#attribName;<?.x;
			retVal.type = NoPL_DataType_Number;
		}
		else if(!strcmp(functionName, "?>#attribName;<?Y"))
		{
			retVal.numberValue = ?>#attribName;<?.y;
			retVal.type = NoPL_DataType_Number;
		}
?>
	}
	else if(convertedTypeName == 'Cocos2dXMLColor')
	{
		<?if(!strcmp(functionName, "?>#attribName;<?R"))
		{
			retVal.numberValue = (float)?>#attribName;<?.rgb.r;
			retVal.type = NoPL_DataType_Number;
		}
		else if(!strcmp(functionName, "?>#attribName;<?G"))
		{
			retVal.numberValue = (float)?>#attribName;<?.rgb.g;
			retVal.type = NoPL_DataType_Number;
		}
		else if(!strcmp(functionName, "?>#attribName;<?B"))
		{
			retVal.numberValue = (float)?>#attribName;<?.rgb.b;
			retVal.type = NoPL_DataType_Number;
		}
		else if(!strcmp(functionName, "?>#attribName;<?A"))
		{
			retVal.numberValue = (float)?>#attribName;<?.a;
			retVal.type = NoPL_DataType_Number;
		}
?>
	}
	else if(convertedTypeName == 'cocos2d::ccColor3B')
	{
		<?if(!strcmp(functionName, "?>#attribName;<?R"))
		{
			retVal.numberValue = (float)?>#attribName;<?.r;
			retVal.type = NoPL_DataType_Number;
		}
		else if(!strcmp(functionName, "?>#attribName;<?G"))
		{
			retVal.numberValue = (float)?>#attribName;<?.g;
			retVal.type = NoPL_DataType_Number;
		}
		else if(!strcmp(functionName, "?>#attribName;<?B"))
		{
			retVal.numberValue = (float)?>#attribName;<?.b;
			retVal.type = NoPL_DataType_Number;
		}
?>
	}
	else
	{
		<?if(!strcmp(functionName, "?>#attribName;<?"))
		{
?>
		switch(convertedTypeName)
		{
			case 'std::string':
			case 'Cocos2dXMLEvent':
			case 'Cocos2dXMLEventListener':
			case 'Cocos2dXMLFilePath':
<?			NoPL_assignString(?>#attribName;<?.c_str(), retVal);
?>
				break;
			case 'int':
			case 'unsigned int':
			case 'double':
			case 'char':
			case 'unsigned char':
<?			retVal.numberValue = (float)?>#attribName;<?;
			retVal.type = NoPL_DataType_Number;
?>
				break;
			case 'float':
<?			retVal.numberValue = ?>#attribName;<?;
			retVal.type = NoPL_DataType_Number;
?>
				break;
			case 'bool':
<?			retVal.booleanValue = ?>#attribName;<?;
			retVal.type = NoPL_DataType_Boolean;
?>
				break;
			default:

				BOOL isEnum = NO;
				String enumName;
				Object enums = abstractions.enums;
				for(int k = 0; k < enums.length; k++)
				{
					if(enums[k].enumName == typeName)
					{
						enumName = enums[k].enumName;
						isEnum = YES;
						break;
					}
				}
				if(isEnum)
				{
					//this is an enum value, convert it to a string
<?			std::string convertedEnum = ?>#enumName;<?_to_string(?>#attribName;<?);
			NoPL_assignString(convertedEnum.c_str(), retVal);
?>
				}
				else
				{
					//this is probably a pointer to an object?
<?			retVal.pointerValue = ?>#attribName;<?;
			retVal.type = NoPL_DataType_Pointer;
?>
				}
				break;
		}
<?		}
?>
	}
}
for(int j = 0; j < children.count; j++)
{
<?		?>
	if(j != 0 || attributes.count > 0)
	{
		<?else ?>
	}
	Object child = children[j];
	String listName = pluralize((String)child.type);
		<?if(!strcmp(functionName, "?>#listName;<?"))
		{
			retVal.pointerValue = ?>#listName;<?;
			retVal.type = NoPL_DataType_Pointer;
		}
?>
}
<?	}
	else
	{
?>
for(int j = 0; j < attributes.count; j++)
{
	Object attrib = attributes[j];
	String attribName = attrib.name;
	String typeName = attrib.type;
<?		?>
	if(j != 0)
	{
		<?else ?>
	}
		<?if(!strcmp(functionName, "set?>#capitalize(attribName);<?"))
		{
?>
		switch(valueForKey(typeName))
		{
			case 'std::string':
			case 'Cocos2dXMLEvent':
			case 'Cocos2dXMLEventListener':
			case 'Cocos2dXMLFilePath':
<?			if(argc == 1 && argv[0].type == NoPL_DataType_String)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?(argv[0].stringValue);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			case 'int':
			case 'unsigned int':
			case 'double':
			case 'char':
			case 'unsigned char':
<?			if(argc == 1 && argv[0].type == NoPL_DataType_Number)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?((?>#valueForKey(typeName);<?)argv[0].numberValue);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			case 'float':
<?			if(argc == 1 && argv[0].type == NoPL_DataType_Number)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?(argv[0].numberValue);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			case 'bool':
<?			if(argc == 1 && argv[0].type == NoPL_DataType_Boolean)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?((bool)argv[0].booleanValue);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			case 'cocos2d::CCPoint':
<?			if(argc == 2 && argv[0].type == NoPL_DataType_Number && argv[1].type == NoPL_DataType_Number)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?(cocos2d::CCPoint(argv[0].numberValue, argv[1].numberValue));
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			case 'Cocos2dXMLColor':
<?			if(argc == 4 && argv[0].type == NoPL_DataType_Number && argv[1].type == NoPL_DataType_Number && argv[2].type == NoPL_DataType_Number && argv[3].type == NoPL_DataType_Number)
			{
				Cocos2dXMLColor newColor;
				newColor.rgb.r = (unsigned char)argv[0].numberValue;
				newColor.rgb.g = (unsigned char)argv[1].numberValue;
				newColor.rgb.b = (unsigned char)argv[2].numberValue;
				newColor.a = (unsigned char)argv[3].numberValue;
				retVal.booleanValue = set?>#capitalize(attribName);<?(newColor);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			case 'cocos2d::ccColor3B':
<?			if(argc == 3 && argv[0].type == NoPL_DataType_Number && argv[1].type == NoPL_DataType_Number && argv[2].type == NoPL_DataType_Number)
			{
				cocos2d::ccColor3B newColor;
				newColor.r = (unsigned char)argv[0].numberValue;
				newColor.g = (unsigned char)argv[1].numberValue;
				newColor.b = (unsigned char)argv[2].numberValue;
				retVal.booleanValue = set?>#capitalize(attribName);<?(newColor);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				break;
			default:

				BOOL isEnum = NO;
				String enumName;
				Object enums = abstractions.enums;
				for(int k = 0; k < enums.length; k++)
				{
					if(enums[k].enumName == typeName)
					{
						enumName = enums[k].enumName;
						isEnum = YES;
						break;
					}
				}
				if(isEnum)
				{
					//this is an enum value, convert it from string
<?			if(argc == 1 && argv[0].type == NoPL_DataType_String)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?(string_to_?>#enumName;<?(argv[0].stringValue));
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				}
				else
				{
					//this is probably a pointer to an object?
<?			if(argc == 1 && argv[0].type == NoPL_DataType_Pointer)
			{
				retVal.booleanValue = set?>#capitalize(attribName);<?(argv[0].pointerValue);
				retVal.type = NoPL_DataType_Boolean;
			}
?>
				}
				break;
		}
<?		}
?>
}
<?	}
?>
	if(!hasParentClass)
	{
<?	return retVal;
?>
	}
	else
	{
<?	//return the result if we found one
	if(retVal.type != NoPL_DataType_Uninitialized)
		return retVal;
	return ?>#parentName;<?::evaluateFunction(functionName, argv, argc);
?>
	}
}

<?}
?>
}

}