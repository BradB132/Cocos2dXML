
console("generating c++ typedefs");

String schemaNickname = schema.targetNamespace;
schemaNickname = substring(schemaNickname, lastIndexOf(schemaNickname, "/")+1);

//Object typedefs = abstractions.typedefs;

//generate the header file for the typedefs
outputToFile(valueForKey('__ROOT_DIR__')+"/"+schemaNickname+"_typedefs.h");

<?//
//  ?>#schemaNickname;<?_typedefs.h
//  ?>#schemaNickname;<?
//
//  Created by NoPLGenerator on ?>#format("%/%/%", (Number)month(), (Number)dayOfTheMonth(), (String)substring((String)year(), 2));<?.
//  Copyright (c) ?>#year();<?. All rights reserved.
//

#ifndef __?>#toUpper(schemaNickname);<?_TYPEDEFS_H__
#define __?>#toUpper(schemaNickname);<?_TYPEDEFS_H__

class ?>#valueForKey('__ROOT_CLASS__');<?;

#include <iostream>
#include "cocos2d.h"

//some specialized types here
typedef std::string Cocos2dXMLEvent;
typedef std::string Cocos2dXMLEventListener;
typedef std::string Cocos2dXMLFilePath;

typedef struct
{
	cocos2d::ccColor3B rgb;
	unsigned char a;
}Cocos2dXMLColor;

//handle conversions from strings
cocos2d::ccColor3B string_to_ccColor3B(const char* colorString);
Cocos2dXMLColor string_to_Cocos2dXMLColor(const char* colorString);
bool string_to_bool(const char* boolString);
cocos2d::CCPoint string_to_CCPoint(const char* pointString);
cocos2d::CCRect string_to_CCRect(const char* rectString);

//utility functions for handling types
bool isKindOfClass(const char* instanceTypeName, const char* desiredTypeName);
?>#valueForKey('__ROOT_CLASS__');<?* newObjectOfType(const char* typeName);

#endif //end __?>#toUpper(schemaNickname);<?_TYPEDEFS_H__

?>

//generate the header file for the typedefs
outputToFile(valueForKey('__ROOT_DIR__')+"/"+schemaNickname+"_typedefs.cpp");

<?
#include "?>#schemaNickname;<?.h"
#include <string.h>
#include <stdio.h>

unsigned char hexToDec(char hexChar)
{
	switch(hexChar)
	{
		case '0': return 0;
		case '1': return 1;
		case '2': return 2;
		case '3': return 3;
		case '4': return 4;
		case '5': return 5;
		case '6': return 6;
		case '7': return 7;
		case '8': return 8;
		case '9': return 9;
		case 'a':
		case 'A':
			return 10;
		case 'b':
		case 'B':
			return 11;
		case 'c':
		case 'C':
			return 12;
		case 'd':
		case 'D':
			return 13;
		case 'e':
		case 'E':
			return 14;
		case 'f':
		case 'F':
			return 15;
		default:
			return 0;
	}
}

cocos2d::ccColor3B string_to_ccColor3B(const char* colorString)
{
	if(colorString[0] == '#')
		colorString++;

	cocos2d::ccColor3B color;
	color.r = (hexToDec(colorString[0]) << 4) + hexToDec(colorString[1]);
	color.g = (hexToDec(colorString[2]) << 4) + hexToDec(colorString[3]);
	color.b = (hexToDec(colorString[4]) << 4) + hexToDec(colorString[5]);
	return color;
}

Cocos2dXMLColor string_to_Cocos2dXMLColor(const char* colorString)
{
	if(colorString[0] == '#')
		colorString++;
	
	Cocos2dXMLColor color;
	color.rgb = string_to_ccColor3B(colorString);
	color.a = (hexToDec(colorString[6]) << 4) + hexToDec(colorString[7]);
	return color;
}

bool string_to_bool(const char* boolString)
{
	return !strcmp(boolString, "true");
}

cocos2d::CCPoint string_to_CCPoint(const char* pointString)
{
	cocos2d::CCPoint point;
	point.x = atof(pointString);
	point.y = atof(strchr(pointString, ',')+1);
	return point;
}

cocos2d::CCRect string_to_CCRect(const char* rectString)
{
	cocos2d::CCRect rect;
	rect.origin.x = atof(rectString);
	rectString = strchr(rectString, ',')+1;
	rect.origin.y = atof(rectString);
	rectString = strchr(rectString, ',')+1;
	rect.size.width = atof(rectString);
	rectString = strchr(rectString, ',')+1;
	rect.size.height = atof(rectString);
	return rect;
}

bool isKindOfClass(const char* instanceTypeName, const char* desiredTypeName)
{
?>
Object classes = abstractions.classes;
for(int i = 0; i < classes.count; i++)
{
	Object class = classes[i];
<?	?>
	if(i != 0)
	{
		<?else ?>
	}
	<?if(!strcmp(instanceTypeName, "?>#class.className;<?"))
	{
		return (?>

	Object parentClassObj = class;
	BOOL first = YES;
	do
	{
		if(!first)
		{
<?
			|| ?>
		}
		
		<?!strcmp(desiredTypeName, "?>#parentClassObj.className;<?")?>
		
		//find the actual object for the parent class
		String parentClassName = parentClassObj.parentClassName;
		Object tempObj = parentClassObj;
		parentClassObj = nil;
		for(int j = 0; j < classes.count; j++)
		{
			if(classes[j].className == parentClassName)			{
				parentClassObj = classes[j];
				break;
			}
		}
		
		first = NO;
		
	}while(parentClassObj != nil);

<?);
	}
?>
}
<?
	//coundn't find the type name
	return false;
}

?>#valueForKey('__ROOT_CLASS__');<?* newObjectOfType(const char* typeName)
{
?>
for(int i = 0; i < classes.count; i++)
{
	Object class = classes[i];
	String className = class.className;
<?	if(!strcmp(typeName, "?>#className;<?"))
		return new ?>#className;<?();
?>
}
<?
	//coundn't find the type name
	return NULL;
}

?>
